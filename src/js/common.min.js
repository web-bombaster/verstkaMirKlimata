
document.addEventListener(
	"DOMContentLoaded", () => {
		function loadData() {
	return new Promise((resolve, reject) => {
	  	// setTimeout не является частью решения
	  	// Код ниже должен быть заменен на логику подходящую для решения вашей задачи
		setTimeout(resolve, 100);
	})
};

loadData()
	.then(() => {
		let preloaderEl = document.getElementById('preloader');
		preloaderEl.classList.add('hidden');
		preloaderEl.classList.remove('visible');
	});if (document.querySelector('.catalog-menu')) {
    const catalogMenuList = document.querySelector('.catalog-menu__list'); // что клонируем
    const catalogMmenu = document.querySelector('.catalog-menu'); // куда клонируем

    const newBlock = catalogMenuList.cloneNode(true);
    catalogMmenu.append(newBlock);
}if (document.querySelector('.js-burger')) {

    const btnBurger = document.querySelectorAll('.js-burger');

    // Открыть / закрыть бургер по клику на него
    function btnBurgerToggle(e) {
        e.target.classList.toggle('toggle');
    }

    // При ресайзе возвращаем кнопки в исходное состояние
    // function btnBurgerToggleClassRemove() {
    //     btnBurger.forEach(element => {
    //         element.classList.remove('toggle');
    //     });
    // }

    btnBurger.forEach(element => {
        element.addEventListener("click", btnBurgerToggle);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}

// по клику на .js-catalog-open-btn открываем / закрываем меню с категориями каталога
if (document.querySelector('.js-catalog-open-btn')) {
    const catalogOpenBtn = document.querySelectorAll('.js-catalog-open-btn');

    // Открыть / закрыть подменю по клику на .js-catalog-open-btn
    function toggleOpen(e) {

        const toggleBtn = (this.closest('.js-catalog-open-btn'));
        const toggleBody = toggleBtn.nextElementSibling;

        toggleBody.classList.toggle('toggle');
    }

    catalogOpenBtn.forEach(element => {
        element.addEventListener("click", toggleOpen);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}



// Если количество чекбоксов больше 5, скрываем их
// и добавляем кнопку Показать все / Свернуть
let quantityCheckbox = function(element) {
    if (element.querySelector('.filter__label')) {
        const listCheckbox = element.querySelectorAll('.filter__label');
        // console.log(listCheckbox.length);

        if (listCheckbox.length > 5) {
            let btnShowAll = document.createElement('span');
            btnShowAll.classList.add('show-all');

            btnShowAll.innerText = 'Показать все';
            element.append(btnShowAll);

            for (let index = 0; index < listCheckbox.length; index++) {
                if (index >= 5) {
                    let checkboxItem = listCheckbox[index];
                    checkboxItem.classList.add('toggle');
                };
            };
        };

    };
};

// для всех filter__box-checkbox запускаем функцию quantityCheckbox
let searchFieldset = function() {
    if (document.querySelector('.filter__fieldset > .filter__box-checkbox')) {
        const listFieldset = document.querySelectorAll('.filter__fieldset > .filter__box-checkbox');
        listFieldset.forEach(function(element) {
            quantityCheckbox(element);
        });
    };
};
searchFieldset();


// По щелчку на кнопку Показать все / Свернуть показываем или скрываем лишние чекбоксы в фильтре
let checkboxListToggle = function() {
	if (document.querySelector('.filter__box-checkbox>.show-all')) {
		let showAll = document.querySelectorAll('.filter__box-checkbox>.show-all');
		showAll.forEach(function(element) {
            // По щелчку на .show-all находим .filter__label,
			element.addEventListener('click', function(e) {
				const boxCheckbox = this.closest('.filter__box-checkbox');
				const checkbox = this.closest('.filter__box-checkbox').querySelectorAll('.filter__label');

                for (let index = 0; index < checkbox.length; index++) {
                    // нужным элементам (>10) создаем условия для кастомного скролла
                    if (index > 10) {
                        boxCheckbox.setAttribute('ss-container', '');
                        boxCheckbox.classList.add('ss-container');
                        boxCheckbox.style.height = 370 + 'px';
                        SimpleScrollbar.initEl(boxCheckbox);
                    };

                    // нужным элементам (>5) делаем toggle класса .toggle для показа / скрытия
                    if (index >= 5) {
                        let checkboxItem = checkbox[index];
                        checkboxItem.classList.toggle('toggle');
                    };
                };

                // Меняем текст кнопки
                element.classList.toggle('toggle');
                if (element.classList.contains('toggle')) {
                    element.innerText = 'Свернуть';
                    if (element.closest('.filter__box-checkbox.ss-container')) {
                        element.closest('.filter__box-checkbox.ss-container').style.height = 370 + 'px';
                    };
                } else {
                    element.innerText = 'Показать все';
                    if (element.closest('.filter__box-checkbox.ss-container')) {
                        element.closest('.filter__box-checkbox.ss-container').removeAttribute('style');
                    };
                };

			});
		});
	};
};

checkboxListToggle();let mobileMenuToggle = function() {

    if (document.querySelector('.jsMobileMenuBtnToggle')) {
    
        const menuBtn = document.querySelector('.jsMobileMenuBtnToggle');
        const body = document.querySelector('body');
        const menu = document.querySelector('.mobile-menu');
    
        body.classList.remove('toggle');
        menu.classList.remove('toggle');
        menuBtn.classList.remove('toggle');

        // Показать / скрыть мобильное меню
        function menuToggle() {

            if (menuBtn.classList.contains('toggle')) {
                menu.classList.add('toggle');
                body.classList.add('toggle');
                // body.style.overflowY = 'hidden';
            } else {
                menu.classList.remove('toggle');
                body.classList.remove('toggle');
                // body.style.overflowY = 'initial';
            }

            closeMobileMenu();
        }
    
        menuBtn.addEventListener("click", menuToggle);
    
        // Закрываем мобильное меню по клику вне его
        function closeMobileMenu() {
            const btnMenu = document.querySelector('.jsMobileMenuBtnToggle');
            const body = document.querySelector('body');
            const menu = document.querySelector('.mobile-menu');
            // const mobileFilter = document.querySelector('.mobile-filter');

            document.addEventListener("click", function (e) {
                const target = e.target;
                const its_menu = target == menu || menu.contains(target);
                // const its_mobileFilter = target == mobileFilter || mobileFilter.contains(target);
                const its_btnMenu = target == btnMenu;

                // if (!its_menu && !its_btnMenu && !its_mobileFilter) {
                if (!its_menu && !its_btnMenu) {
                    menuBtn.classList.remove('toggle');
                    menu.classList.remove('toggle');
                    body.classList.remove('toggle');
                    // body.style.overflowY = 'initial';
                }
            });
        };
    };
};

mobileMenuToggle();
window.addEventListener('resize', mobileMenuToggle, true);function rangeSliderInit(element) { // создаем функцию инициализации слайдера
    const range = element; // Ищем слайдер
    const inputMin = element.parentNode.previousElementSibling.querySelector('.range__input--min'); // Ищем input с меньшим значнием
    const inputMax = element.parentNode.previousElementSibling.querySelector('.range__input--max'); // Ищем input с большим значнием
    const inputMinValue = inputMin.getAttribute('data-value');
    const inputMaxValue = inputMax.getAttribute('data-value');

    if (!range || !inputMin || !inputMax) return; // если этих элементов нет, прекращаем выполнение функции, чтобы не было ошибок

    // start - для ранее инициализированных элементов делаем destroy,
    function destroyExistingSlider(){
        if(range && range.noUiSlider) {
            range.noUiSlider.destroy();
        };
    };

    destroyExistingSlider();

    // удаляем ненужный дубль блока после destroy
    if (range.querySelector('.noUi-base')) {
        range.querySelector('.noUi-base').remove();
    };

    const inputs = [inputMin, inputMax]; // создаем массив из меньшего и большего значения

    // range.noUiSlider.destroy();

    noUiSlider.create(range, { // инициализируем слайдер
        start: [+inputMinValue, +inputMaxValue], // устанавливаем начальные значения
        connect: true, // указываем что нужно показывать выбранный диапазон
        range: { // устанавливаем минимальное и максимальное значения
            'min': +inputMinValue,
            'max': +inputMaxValue
        },
        step: 1, // шаг изменения значений
    });

    range.noUiSlider.on('update', function (values, handle) { // при изменений положения элементов управления слайдера изменяем соответствующие значения
        // inputs[handle].value = parseInt(values[handle]);
        inputs[handle].value = new Intl.NumberFormat('ru-RU').format(parseInt(values[handle]));
    });

    inputMin.addEventListener('change', function () { // при изменении меньшего значения в input - меняем положение соответствующего элемента управления
        range.noUiSlider.set([this.value, null]);
    });

    inputMax.addEventListener('change', function () { // при изменении большего значения в input - меняем положение соответствующего элемента управления
        range.noUiSlider.set([null, this.value]);
    });
};

// для всех слайдеров цен запускаем функцию инициализации
function rangeSlidersSearch() {
    if (document.querySelector('.range__slider')) {
        const ranges = document.querySelectorAll('.range__slider');

        ranges.forEach(function(element) {
            rangeSliderInit(element);
        });
    };
};

rangeSlidersSearch();// клонируем фильтр в переменную
// если разрешение экрана меньше 1200, вставляем клон в бкос для мобильного фильтра
// по щелчку на кнопку .jsFilterToggle открывать мобильный фильтр .mobile-filter
let mobileFilterToggle = function() {
    if (document.querySelector('.jsFilterToggle')) {

        const widthViewport = document.documentElement.clientWidth;
        const body = document.querySelector('body');
        const menuBtn = document.querySelector('.jsFilterToggle');
        const menu = document.querySelector('.mobile-filter');

        // Задаем необходимые начальные настройки
        menuBtn.setAttribute('disabled', '');
        body.classList.remove('toggle-filter');
        menu.classList.remove('toggle');
        menuBtn.classList.remove('toggle');

        // если разрешение экрана меньше 1200, делаем активной кнопку активации мобильного фильтра
        if (widthViewport <= 1200) {
            menuBtn.removeAttribute('disabled');
        };

        // Показать / скрыть фильтр по клику на кнопку
        function menuToggle() {
            const body = document.querySelector('body');
            const menu = document.querySelector('.mobile-filter');

            if (menuBtn.classList.contains('toggle')) {
                menu.classList.add('toggle');
                body.classList.add('toggle-filter');
                // body.style.overflowY = 'hidden';
            } else {
                menu.classList.remove('toggle');
                body.classList.remove('toggle-filter');
                // body.style.overflowY = 'initial';
            };

            closeMobileMenu();
        };
        menuBtn.addEventListener("click", menuToggle);

        // Закрываем мобильный фильтр по клику вне его
        function closeMobileMenu() {
            document.addEventListener("click", function (e) {
                const body = document.querySelector('body');
                const menuBtn = document.querySelector('.jsFilterToggle');
                const menu = document.querySelector('.mobile-filter');
                const mobileMenu = document.querySelector('.mobile-menu');

                const target = e.target;
                const its_menu = target == menu || menu.contains(target);
                const its_mobileMenu = target == mobileMenu || mobileMenu.contains(target);
                const its_btnMenu = target == menuBtn;

                if (!its_menu && !its_btnMenu && !its_mobileMenu) {
                    menuBtn.classList.remove('toggle');
                    menu.classList.remove('toggle');
                    body.classList.remove('toggle-filter');
                    // body.style.overflowY = 'initial';
                };
            });
        };
        // closeMobileMenu();

        // По клику на кнопку открытия фильтра в temp клонируем фильтр. А потом уже temp закидываем в мобильный фильтр
        function filterClone() {
            const filter = document.querySelector('.filter__form');
            let temp = filter.cloneNode(true);
            menu.innerHTML = '';
            menu.append(temp);

            checkboxListToggle(); // По щелчку на кнопку Показать все / Свернуть показываем или скрываем лишние чекбоксы в фильтре

            rangeSlidersSearch();
        };
        menuBtn.addEventListener("click", filterClone);

    };
};

mobileFilterToggle();
window.addEventListener('resize', mobileFilterToggle, true);document.querySelector('body').addEventListener("click", function (e) {
    // добавление в избранное
    if (e.target.closest('.bookmark'))  {
        e.preventDefault();

        const btn = e.target.closest('.bookmark');
        btn.classList.toggle('isSent');

        if (btn.classList.contains('isSent')) {
            btn.setAttribute('title', 'Удалить из избранного');
            // btn.firstElementChild.firstElementChild.setAttribute('xlink:href', 'img/sprite.svg#shop-favourites-fill');
        } else {
            btn.setAttribute('title', 'Добавить в избранное');
            // btn.firstElementChild.firstElementChild.setAttribute('xlink:href', 'img/sprite.svg#shop-favourites');
        };
    };

    // добавление в корзину
    if (e.target.closest('.buy')) {
        e.preventDefault();

        const btn = e.target.closest('.buy');
        btn.classList.toggle('isSent');

        if (btn.classList.contains('isSent')) {
            btn.setAttribute('title', 'Добавлено в корзину');
            // btn.firstElementChild.firstElementChild.setAttribute('xlink:href', 'img/sprite.svg#check');
            btn.querySelector('span').innerText = 'В корзине';
        } else {
            btn.setAttribute('title', 'Добавить в корзину');
            // btn.firstElementChild.firstElementChild.setAttribute('xlink:href', 'img/sprite.svg#shop-cart');
            btn.querySelector('span').innerText = 'В корзину';
        };
    };

    // при нажатии ряда кнопок на карточке, убираем дефолтное поведение, переключаем класс активности
    if (e.target.closest('.compare, .credit')) {
        e.preventDefault();
        e.target.closest('.compare, .credit').classList.toggle('isSent');
    };
});

//

function adClassJsToggleSubMenuBtn() {
    if (document.querySelector('.catalog-menu__list')) {
        let toggleSubMenuBtns = document.querySelectorAll('.catalog-menu__list>li>ul');

        toggleSubMenuBtns.forEach(function(element) {
            element.parentElement.classList.add('jsToggleSubMenuBtn');
        });
    };

};

adClassJsToggleSubMenuBtn();


function toggleMenu() {

    // Перебираем кнопки .jsToggleSubMenuBtn , вешаем на них по клику функцию открытия меню
    if (document.querySelector('.jsToggleSubMenuBtn')) {
        const toggleBtn = document.querySelectorAll('.jsToggleSubMenuBtn');
        const toggleLink = document.querySelectorAll('.jsToggleSubMenuBtn > a');

        if (toggleLink) {
            toggleLink.forEach(element => {
                element.addEventListener("click", function (e) {
                    e.preventDefault();
                });
            });
        }

        toggleBtn.forEach(element => {
            element.addEventListener("click", toggleOpen);
        });
    };

    // Открыть / закрыть подменю по клику на .jsToggleSubMenuBtn'
    function toggleOpen(e) {
        const toggleMenuBtn = this.closest('.jsToggleSubMenuBtn');
        // const toggleCheck = (toggleMenuBtn.classList.contains('toggle'));
        const toggleBody = toggleMenuBtn.querySelector('.jsToggleBody');

        toggleMenuBtn.classList.toggle('toggle');
        toggleBody.classList.toggle('toggle');
    };
};

toggleMenu();


// -include './myscripts/hidden-text.js'
		// Инициализация Inputmask
// https://github.com/RobinHerbots/Inputmask

function initInputMask() {
	let formPhone = document.querySelectorAll('.form__phone');
	formPhone.forEach(element => {
		Inputmask({ "mask": "+7 (999) 999-99-99" }).mask(element);
	});
}

initInputMask();

// Инициализация just-validate
// https://github.com/horprogs/Just-validate
// https://just-validate.dev/

function initJustValidatHelpForme() {
	const validation = new JustValidate('.help__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
}

if (document.querySelector('.help__form')) {
	initJustValidatHelpForme();
}

function initJustValidatRegistrationForm() {
	const validation = new JustValidate('.registration__form');

	validation
		// .addField('.form__name', [
		// 	{
		// 		rule: 'required',
		// 		errorMessage: 'Введите имя!',
		// 	},
		// 	{
		// 		rule: 'minLength',
		// 		value: 3,
		// 		errorMessage: 'Минимум 3 символа',
		// 	},
		// 	{
		// 		rule: 'maxLength',
		// 		value: 30,
		// 		errorMessage: 'Максимум 30 символов',
		// 	},
		// ])
		.addField('.form__name', [
			{
				rule: 'required',
				errorMessage: 'Введите имя!',
			},
		])
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
	// .onSuccess((event) => {

	// 	// sentForm();
	// 	// Когда валидация прошла, отправляем форму
	// 	let element = event.target;
	// 	let formData = new FormData(element);
	// 	let xhr = new XMLHttpRequest();
	// 	xhr.onreadystatechange = function () {
	// 		if (xhr.readyState === 4) {
	// 			if (xhr.status === 200) {
	// 				console.log('Отправлено');
	// 				// Закрываем модалку
	// 				element.closest('.modal').classList.remove('show');
	// 				// Показываем другую модалку с ссобщением об успещной отправке
	// 				document.getElementById('modal-05').classList.add('show');
	// 			}
	// 		}
	// 	}

	// 	xhr.open('POST', 'mail.php', true);
	// 	xhr.send(formData);

	// 	element.reset();

	// });
}

if (document.querySelector('.registration__form')) {
	initJustValidatRegistrationForm();
}

function initJustValidatGoodDeal() {
	const validation = new JustValidate('.good-deal__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
}

if (document.querySelector('.good-deal__form')) {
	initJustValidatGoodDeal();
}// функция будет перемещать блок в указанное место по клику на кнопку
// Параметры:
// block - что перемещаем
// to - куда перемещаем
// metod - append, prepend, before, after - задает способ вставки
// parent - родитель (карточка товара)
// btn - по какой кнопке щелкаем для перемещения

let gridTransferElement = function(block, to, metod, parent, btn) {
    // т.к. document.getElementsByClassName(parent) возвращает коллекцию, переведем ее в массив
    const cards = Array.from(document.getElementsByClassName(parent));
    const mybtn = document.querySelector(btn);

    mybtn.addEventListener('click', function() {

        cards.forEach(function(element) {
            switch (metod) {
                case 'prepend':
                    element.querySelector(to).prepend(element.querySelector(block));
                    break;

                case 'before':
                    element.querySelector(to).before(element.querySelector(block));
                    break;

                case 'after':
                    element.querySelector(to).after(element.querySelector(block));
                    break;

                default:
                    element.querySelector(to).append(element.querySelector(block));
                    break;
            };

        });

    });

};

let gridToggle = function() {
    // Проверяем, чтобы на странице был блок с каталогом
    if (document.querySelector('.catalog__content')) {

        // Перенос элементов для кнопки grid-slim-line
        gridTransferElement ('.product-item__availability', '.product-item__middle', 'append', 'product-item', '.page-view__item[data-class="grid-slim-line"]');
        gridTransferElement ('.labels', '.product-item__middle', 'append', 'product-item', '.page-view__item[data-class="grid-slim-line"]');

        // Перенос элементов для кнопки grid-line
        gridTransferElement ('.product-item__availability', '.product-item__footer', 'prepend', 'product-item', '.page-view__item[data-class="grid-line"]');
        gridTransferElement ('.product-item__btn-box', '.product-item__head', 'prepend', 'product-item', '.page-view__item[data-class="grid-line"]');
        gridTransferElement ('.labels', '.product-item__head', 'prepend', 'product-item', '.page-view__item[data-class="grid-line"]');

        // Перенос элементов для кнопки grid
        gridTransferElement ('.product-item__availability', '.product-item__info', 'append', 'product-item', '.page-view__item[data-class="grid"]');
        gridTransferElement ('.product-item__btn-box', '.product-item__actions', 'append', 'product-item', '.page-view__item[data-class="grid"]');
        gridTransferElement ('.labels', '.product-item__head', 'prepend', 'product-item', '.page-view__item[data-class="grid"]');

    };
};

gridToggle();const accordeonItems = document.querySelectorAll('.accordeon-item__title'); // Все заголовки элементов аккордиона, по которым щелкаем для открытия / закрытия контента выбранного элемента
const accordeonItemsContent = document.querySelectorAll('.accordeon-item__descr'); // Контент всех элементов аккордиона, который открывается, закрывается

// Перебираем заголовки аккордеона, по которым можем щелкнуть
accordeonItems.forEach((element, index) => {
	// Вешаем событие клика на каждый заголовок аккордеона
	element.addEventListener('click', function () {

		// Если у элемента, по которому щелкнули, нет класса активности,
		if (!accordeonItems[index].classList.contains('toggle')) {

			// Пробегаемся по заголовкам элементов аккордеона
			accordeonItems.forEach(element => {
				// удаляем класс активности
				element.classList.remove('toggle');
			});

			// Перебираем контент для айтемов аккордиона и скрываем.
			accordeonItemsContent.forEach(element => {
				element.classList.remove('toggle');
			});
		};

		// Переключаем класс активности элемента, по которому щелкнули
		accordeonItems[index].classList.toggle('toggle');

		// Делаем тоггл для контета элемента, по которому щелкнули
		accordeonItemsContent[index].classList.toggle('toggle');

	});

});// Инициализация слайдера swiper
// https://swiperjs.com/

function initSwiper() {

	// if (document.querySelector('.filter__fieldset .swiper')) {
	// 	const filterSwiper = new Swiper('.filter__fieldset .swiper', {
	// 		direction: "vertical",
	// 		slidesPerView: "auto",
	// 		freeMode: true,
	// 		scrollbar: {
	// 			el: ".swiper-scrollbar",
	// 		},
	// 		mousewheel: true,
	// 	});
	// };

	// Блок hero на главной
	if (document.querySelector('.jsHeroSlider')) {
		const prodSliderInner = new Swiper('.jsHeroSlider', {
			spaceBetween: 20,
			slidesPerView: 1,
			loop: true,
			pagination: {
				el: ".hero-slider__pagination",
			},
			navigation: {
				nextEl: ".hero-slider__next",
				prevEl: ".hero-slider__prev",
			},
		});
	};

	// ХИТЫ ПРОДАЖ на главной
	if (document.querySelector('.jsProductsListSlider')) {
		const prodSliderInner = new Swiper('.jsProductsListSlider', {
			spaceBetween: 10,
			slidesPerView: 1,
			loop: false,
			breakpoints: {
				500: {
					slidesPerView: 2,
					spaceBetween: 10,
					loop: false,
				},
				768: {
					slidesPerView: 3,
					spaceBetween: 20,
					loop: false,
				},
				1401: {
					slidesPerView: 4,
					spaceBetween: 20,
					loop: false,
				},
			},
			navigation: {
				nextEl: ".products-list__next",
				prevEl: ".products-list__prev",
			},
		});
	};

	// Рекомендуем посмотреть
	if (document.querySelector('.jsRecommendedProductsSlider')) {
		const prodSliderInner = new Swiper('.jsRecommendedProductsSlider', {
			spaceBetween: 10,
			slidesPerView: 1,
			loop: true,
			breakpoints: {
				500: {
					slidesPerView: 2,
					spaceBetween: 10,
					loop: true,
				},
				768: {
					slidesPerView: 3,
					spaceBetween: 20,
					loop: true,
				},
				1401: {
					slidesPerView: 4,
					spaceBetween: 20,
					loop: true,
				},
				1501: {
					slidesPerView: 5,
					spaceBetween: 20,
					loop: true,
				},
			},
			navigation: {
				nextEl: ".recommended-products__next",
				prevEl: ".recommended-products__prev",
			},
		});
	};

	// ПОПУЛЯРНЫЕ БРЕНДЫ на главной
	if (document.querySelector('.jsBrandsList')) {
		const brandsList = new Swiper('.jsBrandsList', {
			// slidesPerView: 5,
			loop: true,
			spaceBetween: 20,
			autoplay: {
				delay: 2500,
			},
			navigation: {
				nextEl: '.brands__button-next',
				prevEl: '.brands__button-prev',
			},

			breakpoints: {
				319: {
					slidesPerView: 2,
				},

				767: {
					slidesPerView: 3,
				},

				991: {
					slidesPerView: 4,
				},
				1199: {
					slidesPerView: 5,
				},
			},
		});
	};


	// Страница товара
	if (document.querySelector('.slider-photo')) {
		let miniSlider = new Swiper('.slider-thumbs', {
			slidesPerView: "auto",
			// centeredSlides: true,
			// direction: 'vertical',
			spaceBetween: 10,
			watchSlidesProgress: true,
			freeMode: true, // при перетаскивании превью ведет себя как при скролле
			// loop: true,
			// navigation: {
			// 	nextEl: ".collection-mini-slider__next",
			// 	prevEl: ".collection-mini-slider__prev",
			// },
		});

		const bigSlider = new Swiper('.slider-photo', {
			slidesPerView: 1,
			spaceBetween: 20,
			loop: true,
			thumbs: {
				swiper: miniSlider,
			},
			navigation: {
				nextEl: ".slider-photo__next",
				prevEl: ".slider-photo__prev",
			},
			// pagination: {
			// 	el: ".slider-photo__pagination",
			// 	type: "fraction",
			// },
		});
	};

};

// window.addEventListener("resize", initSwiper);
window.addEventListener("resize", function () {
	// setTimeout(initSwiper, 200);
	initSwiper();
	// swiper.init();
});

initSwiper();


// по щелчку на кнопку с выбором типа сортировки выпадают доступные варианты сортировки товаров
let pageSort = function() {
    if (document.querySelector('.page-sort__current')) {
        const btnPageSort = document.querySelector('.page-sort__current');
        btnPageSort.addEventListener('click', function() {
            this.classList.toggle('toggle');
            if (this.classList.contains('toggle')) {
                this.nextElementSibling.classList.add('toggle');
            } else {
                this.nextElementSibling.classList.remove('toggle');
            };
        });
    };
};
pageSort();

// по щелчку изменяем тип сортировки товаров
let pageSortToggle = function() {
    if (document.querySelector('.variants-item')) {
        const btnVariants = document.querySelectorAll('.variants-item');
        let variantTitle;
        // по клику на вариант сортировки у всех убираем .toggle, а у активного добавляем его
        btnVariants.forEach(function(element) {
            element.addEventListener('click', function() {
                btnVariants.forEach(function(element) {
                    element.classList.remove('toggle');
                });
                this.classList.toggle('toggle');

                // Текст выбраного варианта в кнопку
                variantTitle = this.innerText;
                this.parentElement.previousElementSibling.querySelector('.title').innerText = variantTitle;
                this.parentElement.classList.remove('toggle');
                this.parentElement.previousElementSibling.classList.remove('toggle');
            });
        });
    };
};
pageSortToggle();

// по щелчку изменяем активность кнопок количества товаров на странице
let pageCountToggle = function() {
    if (document.querySelector('.page-count__item')) {
        const btnCount = document.querySelectorAll('.page-count__item');

        // по клику у всех убираем .toggle, а у активного добавляем его
        btnCount.forEach(function(element) {
            element.addEventListener('click', function() {
                btnCount.forEach(function(element) {
                    element.classList.remove('toggle');
                });
                this.classList.toggle('toggle');
            });
        });
    };
};
pageCountToggle();

// по щелчку изменяем активность кнопок вида отображения сетки товаров
let pageViewToggle = function() {
    if (document.querySelector('.page-view__item')) {
        const btnView = document.querySelectorAll('.page-view__item');
        let gridClass;

        btnView.forEach(function(element) {
            element.addEventListener('click', function() {
                const products = document.querySelector('.products-inner');
                // const productsClassDefault = '.products-inner';

                // по клику у всех убираем .toggle, а у активного добавляем его
                btnView.forEach(function(element) {
                    element.classList.remove('toggle');
                });
                this.classList.toggle('toggle');

                // Достаем имя класса из дата атрибута и раздем его сетке товаров
                gridClass = this.getAttribute('data-class');
                products.setAttribute('class', 'products-inner'); // возвращаем каждый раз в начальное состояние, чтобы не накапливать классы
                products.classList.add(gridClass);
            });
        });
    };
};
pageViewToggle();

// по щелчку изменяем активность кнопок количества товаров на странице
let productModelToggle = function() {
    if (document.querySelector('.product-model__item')) {
        const btnCount = document.querySelectorAll('.product-model__item');

        // по клику у всех убираем .toggle, а у активного добавляем его
        btnCount.forEach(function(element) {
            element.addEventListener('click', function() {
                btnCount.forEach(function(element) {
                    element.classList.remove('toggle');
                });
                this.classList.toggle('toggle');
            });
        });
    };
};
productModelToggle();// https://github.com/dinbror/blazy/
// http://dinbror.dk/blog/blazy/#Usage


let blazy = new Blazy();

let homeContentImg = new Blazy({
	breakpoints: [{
		width: 480, // max-width
		src: 'data-src-small'
	}, {
		width: 992, // max-width
		src: 'data-src-medium'
	}]
});// -include './myscripts/colorsCollection.js'
		// Структура табов:
// .tabs - обертка для табов
// .tabs-btns - обертка для кнопок табов .tabs-btn__item
// .tabs-descr - обертка для содержимого табов .tabs-descr__item

// переключение табов
const tabsToggle = function() {
    const tabBtnClass = '.tabs-btn__item'; // задаем класс кнопки таба

    if (document.querySelector(tabBtnClass)) {

        const tabContentClass = '.tabs-descr__item'; // задаем класс содержимого таба

        const tabsBtn = document.querySelectorAll(tabBtnClass); // все кнопки табов
        const tabsContent = document.querySelectorAll(tabContentClass); // все содержимое табов

        // Перебираем кнопки табов, по которым можем щелкнуть
        tabsBtn.forEach(function(btn, index) {

            // Вешаем событие клика на каждую кнопку
            btn.addEventListener('click', function () {

                // у всех кнопок одного родителя убрать класс активности
                tabsBtn[index].parentNode.querySelectorAll(tabBtnClass).forEach(function(element) {
                    element.classList.remove('toggle');
                });

                // у кнопки, по которой щелкнули, добавить класс активности
                tabsBtn[index].classList.add('toggle');

                // у каждого содержимого одного родителя удалить класс активности
                tabsContent[index].parentNode.querySelectorAll(tabContentClass).forEach(function(element) {
                    element.classList.remove('toggle');
                });

                // у содержимого с этим индексом добавить класс активности
                tabsContent[index].classList.add('toggle');

            });

        });

    };
};

tabsToggle();}
);
