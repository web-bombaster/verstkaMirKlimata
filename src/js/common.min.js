
document.addEventListener(
	"DOMContentLoaded", () => {
		function loadData() {
	return new Promise((resolve, reject) => {
	  	// setTimeout не является частью решения
	  	// Код ниже должен быть заменен на логику подходящую для решения вашей задачи
		setTimeout(resolve, 100);
	})
};

loadData()
	.then(() => {
		let preloaderEl = document.getElementById('preloader');
		preloaderEl.classList.add('hidden');
		preloaderEl.classList.remove('visible');
	});if (document.querySelector('.catalog-menu')) {
    const catalogMenuList = document.querySelector('.catalog-menu__list'); // что клонируем
    const catalogMmenu = document.querySelector('.catalog-menu'); // куда клонируем

    const newBlock = catalogMenuList.cloneNode(true);
    catalogMmenu.append(newBlock);
}if (document.querySelector('.jsMobileMenuBtnToggle')) {

    const menuBtn = document.querySelector('.jsMobileMenuBtnToggle');
    // console.log(menuBtn);

    // Показать / скрыть мобильное меню
    function menuToggle() {
        const body = document.querySelector('body');
        const menu = document.querySelector('.mobile-menu');

        if (!menuBtn.classList.contains('toggle')) {
            menu.classList.add('toggle');
            body.classList.add('toggle');
        } else {
            menu.classList.remove('toggle');
            body.classList.remove('toggle');
        }

        window.addEventListener('resize', function () {
            menuBtn.classList.remove('toggle');
            menu.classList.remove('toggle');
            body.classList.remove('toggle');
        }, true);

        // heightMenuOverlay(); // меняем высоту оверлея меню при ресайзе
    }

    menuBtn.addEventListener("click", menuToggle);

    // Закрываем мобильное меню по клику вне его
    function closeMobileMenu() {
        const btnMenu = document.querySelector('.jsMobileMenuBtnToggle');
        const body = document.querySelector('body');
        const menu = document.querySelector('.mobile-menu');

        document.addEventListener("click", function (e) {
            const target = e.target;
            const its_menu = target == menu || menu.contains(target);
            const its_btnMenu = target == btnMenu;

            if (!its_menu && !its_btnMenu) {
                menuBtn.classList.remove('toggle');
                menu.classList.remove('toggle');
                body.classList.remove('toggle');
            }
        });
    };

    closeMobileMenu();

};


if (document.querySelector('.js-burger')) {

    const btnBurger = document.querySelectorAll('.js-burger');

    // Открыть / закрыть бургер по клику на него
    function btnBurgerToggle(e) {
        e.target.classList.toggle('toggle');
    }

    // При ресайзе возвращаем кнопки в исходное состояние
    // function btnBurgerToggleClassRemove() {
    //     btnBurger.forEach(element => {
    //         element.classList.remove('toggle');
    //     });
    // }

    btnBurger.forEach(element => {
        element.addEventListener("click", btnBurgerToggle);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}

// по клику на .js-catalog-open-btn открываем / закрываем меню с категориями каталога
if (document.querySelector('.js-catalog-open-btn')) {
    const catalogOpenBtn = document.querySelectorAll('.js-catalog-open-btn');

    // Открыть / закрыть подменю по клику на .js-catalog-open-btn
    function toggleOpen(e) {

        const toggleBtn = (this.closest('.js-catalog-open-btn'));
        const toggleBody = toggleBtn.nextElementSibling;

        toggleBody.classList.toggle('toggle');
    }

    catalogOpenBtn.forEach(element => {
        element.addEventListener("click", toggleOpen);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}



document.querySelector('body').addEventListener("click", function (e) {
    // добавление в избранное
    if (e.target.closest('.bookmark'))  {
        e.preventDefault();
        // e.target.closest('.bookmark').firstElementChild.classList.toggle('isSent');

        const btn = e.target.closest('.bookmark').firstElementChild;
        btn.classList.toggle('isSent');

        if (btn.classList.contains('isSent')) {
            btn.setAttribute('title', 'Удалить из избранного');
            btn.firstElementChild.firstElementChild.setAttribute('xlink:href', 'img/sprite.svg#shop-favourites-fill');
        } else {
            btn.setAttribute('title', 'Добавить в избранное');
            btn.firstElementChild.firstElementChild.setAttribute('xlink:href', 'img/sprite.svg#shop-favourites');
        }
    }

    // добавление в корзину
    if (e.target.closest('.buy')) {
        e.preventDefault();

        const btn = e.target.closest('.buy').firstElementChild;
        btn.classList.toggle('isSent');

        if (btn.classList.contains('isSent')) {
            btn.setAttribute('title', 'Добавлено в корзину');
            btn.firstElementChild.firstElementChild.setAttribute('xlink:href', 'img/sprite.svg#check');
        } else {
            btn.setAttribute('title', 'Добавить в корзину');
            btn.firstElementChild.firstElementChild.setAttribute('xlink:href', 'img/sprite.svg#shop-cart');
        }
    }

    // добавление в сравнение
    if (e.target.closest('.compare')) {
        e.preventDefault();
        e.target.closest('.compare').firstElementChild.classList.toggle('isSent');
    }
});

//
function toggleMenu() {

    // Перебираем кнопки .jsToggleSubMenuBtn , вешаем на них по клику функцию открытия меню
    if (document.querySelector('.jsToggleSubMenuBtn')) {
        const toggleBtn = document.querySelectorAll('.jsToggleSubMenuBtn');
        const toggleLink = document.querySelectorAll('.jsToggleSubMenuBtn > a');

        if (toggleLink) {
            toggleLink.forEach(element => {
                element.addEventListener("click", function (e) {
                    e.preventDefault();
                });
            });
        }

        toggleBtn.forEach(element => {
            element.addEventListener("click", toggleOpen);
        });
    };

    // Открыть / закрыть подменю по клику на .jsToggleSubMenuBtn'
    function toggleOpen(e) {
        const toggleMenuBtn = this.closest('.jsToggleSubMenuBtn');
        // const toggleCheck = (toggleMenuBtn.classList.contains('toggle'));
        const toggleBody = toggleMenuBtn.querySelector('.jsToggleBody');

        toggleMenuBtn.classList.toggle('toggle');
        toggleBody.classList.toggle('toggle');
    }
};

toggleMenu();


// -include './myscripts/hidden-text.js'
		// Инициализация Inputmask
// https://github.com/RobinHerbots/Inputmask

function initInputMask() {
	let formPhone = document.querySelectorAll('.form__phone');
	formPhone.forEach(element => {
		Inputmask({ "mask": "+7 (999) 999-99-99" }).mask(element);
	});
}

initInputMask();

// Инициализация just-validate
// https://github.com/horprogs/Just-validate
// https://just-validate.dev/

function initJustValidatHelpForme() {
	const validation = new JustValidate('.help__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
}

if (document.querySelector('.help__form')) {
	initJustValidatHelpForme();
}

function initJustValidatRegistrationForm() {
	const validation = new JustValidate('.registration__form');

	validation
		// .addField('.form__name', [
		// 	{
		// 		rule: 'required',
		// 		errorMessage: 'Введите имя!',
		// 	},
		// 	{
		// 		rule: 'minLength',
		// 		value: 3,
		// 		errorMessage: 'Минимум 3 символа',
		// 	},
		// 	{
		// 		rule: 'maxLength',
		// 		value: 30,
		// 		errorMessage: 'Максимум 30 символов',
		// 	},
		// ])
		.addField('.form__name', [
			{
				rule: 'required',
				errorMessage: 'Введите имя!',
			},
		])
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
	// .onSuccess((event) => {

	// 	// sentForm();
	// 	// Когда валидация прошла, отправляем форму
	// 	let element = event.target;
	// 	let formData = new FormData(element);
	// 	let xhr = new XMLHttpRequest();
	// 	xhr.onreadystatechange = function () {
	// 		if (xhr.readyState === 4) {
	// 			if (xhr.status === 200) {
	// 				console.log('Отправлено');
	// 				// Закрываем модалку
	// 				element.closest('.modal').classList.remove('show');
	// 				// Показываем другую модалку с ссобщением об успещной отправке
	// 				document.getElementById('modal-05').classList.add('show');
	// 			}
	// 		}
	// 	}

	// 	xhr.open('POST', 'mail.php', true);
	// 	xhr.send(formData);

	// 	element.reset();

	// });
}

if (document.querySelector('.registration__form')) {
	initJustValidatRegistrationForm();
}

function initJustValidatGoodDeal() {
	const validation = new JustValidate('.good-deal__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
}

if (document.querySelector('.good-deal__form')) {
	initJustValidatGoodDeal();
}const accordeonItems = document.querySelectorAll('.accordeon__title'); // Все заголовки элементов аккордиона, по которым щелкаем для открытия / закрытия контента выбранного элемента
const accordeonItemsContent = document.querySelectorAll('.accordeon__content'); // Контент всех элементов аккордиона, который открывается, закрывается

// Перебираем заголовки аккордеона, по которым можем щелкнуть
accordeonItems.forEach((element, index) => {
	// Вешаем событие клика на каждый заголовок аккордеона
	element.addEventListener('click', function () {

		// Если у элемента, по которому щелкнули, нет класса активности,
		// if (!accordeonItems[index].classList.contains('accordeon__title--active')) {

		// 	// Пробегаемся по заголовкам элементов аккордеона
		// 	accordeonItems.forEach(element => {
		// 		// удаляем класс активности
		// 		element.classList.remove('accordeon__title--active');
		// 	});

		// 	// Перебираем контент для айтемов аккордиона и скрываем.
		// 	accordeonItemsContent.forEach(element => {
		// 		element.classList.add('accordeon__content--hidden');
		// 	});
		// };

		// Переключаем класс активности элемента, по которому щелкнули
		accordeonItems[index].classList.toggle('accordeon__title--active');

		// Делаем тоггл для контета элемента, по которому щелкнули
		accordeonItemsContent[index].classList.toggle('accordeon__content--hidden');

	});
});// Инициализация слайдера swiper
// https://swiperjs.com/

function initSwiper() {

	if (document.querySelector('.jsHeroSlider')) {
		const prodSliderInner = new Swiper('.jsHeroSlider', {
			spaceBetween: 20,
			slidesPerView: 1,
			loop: true,
			pagination: {
				el: ".hero-slider__pagination",
			},
			navigation: {
				nextEl: ".hero-slider__next",
				prevEl: ".hero-slider__prev",
			},
		});
	};

	if (document.querySelector('.jsProductsListSlider')) {
		const prodSliderInner = new Swiper('.jsProductsListSlider', {
			spaceBetween: 10,
			slidesPerView: 1,
			loop: true,
			breakpoints: {
				500: {
					slidesPerView: 2,
					spaceBetween: 10,
					loop: true,
				},
				768: {
					slidesPerView: 3,
					spaceBetween: 20,
					loop: true,
				},
				1401: {
					slidesPerView: 4,
					spaceBetween: 20,
					loop: true,
				},
			},
			navigation: {
				nextEl: ".products-list__next",
				prevEl: ".products-list__prev",
			},
		});
	};

	if (document.querySelector('.jsBrandsList')) {
		const brandsList = new Swiper('.jsBrandsList', {
			// slidesPerView: 5,
			loop: true,
			spaceBetween: 20,
			autoplay: {
				delay: 2500,
			},
			navigation: {
				nextEl: '.brands__button-next',
				prevEl: '.brands__button-prev',
			},

			breakpoints: {
				319: {
					slidesPerView: 2,
				},

				767: {
					slidesPerView: 3,
				},

				991: {
					slidesPerView: 4,
				},
				1199: {
					slidesPerView: 5,
				},
			},
		});
	};
};

// window.addEventListener("resize", initSwiper);
window.addEventListener("resize", function () {
	// setTimeout(initSwiper, 200);
	initSwiper();
	// swiper.init();
});

initSwiper();


function rangeSliderInit(element) { // создаем функцию инициализации слайдера
    const range = element; // Ищем слайдер
    const inputMin = element.parentNode.previousElementSibling.querySelector('.range__input--min'); // Ищем input с меньшим значнием
    const inputMax = element.parentNode.previousElementSibling.querySelector('.range__input--max'); // Ищем input с большим значнием
    const inputMinValue = inputMin.getAttribute('data-value');
    const inputMaxValue = inputMax.getAttribute('data-value');

    if (!range || !inputMin || !inputMax) return; // если этих элементов нет, прекращаем выполнение функции, чтобы не было ошибок

    const inputs = [inputMin, inputMax]; // создаем массив из меньшего и большего значения

    noUiSlider.create(range, { // инициализируем слайдер
        start: [+inputMinValue, +inputMaxValue], // устанавливаем начальные значения
        connect: true, // указываем что нужно показывать выбранный диапазон
        range: { // устанавливаем минимальное и максимальное значения
            'min': +inputMinValue,
            'max': +inputMaxValue
        },
        step: 1, // шаг изменения значений
    });

    range.noUiSlider.on('update', function (values, handle) { // при изменений положения элементов управления слайдера изменяем соответствующие значения
        inputs[handle].value = parseInt(values[handle]);
    });

    inputMin.addEventListener('change', function () { // при изменении меньшего значения в input - меняем положение соответствующего элемента управления
        range.noUiSlider.set([this.value, null]);
    });

    inputMax.addEventListener('change', function () { // при изменении большего значения в input - меняем положение соответствующего элемента управления
        range.noUiSlider.set([null, this.value]);
    });
};

// для всех слайдеров цен запускаем функцию инициализации
function rangeSlidersSearch() {
    if (document.querySelector('.range__slider')) {
        const ranges = document.querySelectorAll('.range__slider');

        ranges.forEach(function(element) {
            rangeSliderInit(element);
        });
    };
};

rangeSlidersSearch();// Если количество чекбоксов больше 5, скрываем их
// и добавляем кнопку Показать все / Свернуть
function quantityCheckbox(element) {
    if (element.querySelector('.filter__label')) {
        const listCheckbox = element.querySelectorAll('.filter__label');
        // console.log(listCheckbox.length);
        if (listCheckbox.length > 5) {
            let btnShowAll = document.createElement('span');
            btnShowAll.classList.add('show-all');
            // show-all
            btnShowAll.innerText = 'Показать все';
            element.append(btnShowAll);

            for (let index = 0; index < listCheckbox.length; index++) {
                if (index >= 5) {
                    let checkboxItem = listCheckbox[index];
                    checkboxItem.classList.add('toggle');
                };
            };
        }
    };
};

// для всех filter__box-checkbox запускаем функцию quantityCheckbox
function searchFieldset() {
    if (document.querySelector('.filter__fieldset > .filter__box-checkbox')) {
        const listFieldset = document.querySelectorAll('.filter__fieldset > .filter__box-checkbox');
        listFieldset.forEach(function(element) {
            quantityCheckbox(element);
        });
    };
};

searchFieldset();


// По щелчку на кнопку Показать все / Свернуть показываем или скрываем лишние чекбоксы в фильтре
function checkboxListToggle() {
	if (document.querySelector('.filter__box-checkbox>.show-all')) {
		let showAll = document.querySelectorAll('.filter__box-checkbox>.show-all');
		showAll.forEach(function(element) {
            // По щелчку на .show-all находим .filter__label,
			element.addEventListener('click', function(e) {
				const checkbox = this.parentNode.querySelectorAll('.filter__label');

                // нужным элементам (>5) делаем toggle класса .toggle для показа / скрытия
                for (let index = 0; index < checkbox.length; index++) {
                    if (index >= 5) {
                        let checkboxItem = checkbox[index];
                        checkboxItem.classList.toggle('toggle');
                    };
                };

                // Меняем текст кнопки
                element.classList.toggle('toggle');
                if (element.classList.contains('toggle')) {
                    element.innerText = 'Свернуть';
                } else {
                    element.innerText = 'Показать все';
                }
			});
		});
	};
};

checkboxListToggle();// https://github.com/dinbror/blazy/
// http://dinbror.dk/blog/blazy/#Usage


let blazy = new Blazy();

let homeContentImg = new Blazy({ 
	breakpoints: [{
		  width: 480 // max-width
	, src: 'data-src-small'
	 }
	   , {
		  width: 992 // max-width
		, src: 'data-src-medium'
}]
});// -include './myscripts/colorsCollection.js'
	}
);
